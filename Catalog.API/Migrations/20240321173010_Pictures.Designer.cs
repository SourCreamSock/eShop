// <auto-generated />
using System;
using Catalog.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Catalog.API.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20240321173010_Pictures")]
    partial class Pictures
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Catalog.API.Model.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CatalogItems", (string)null);
                });

            modelBuilder.Entity("Catalog.API.Model.CatalogItemAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CatalogItemAttributes", (string)null);
                });

            modelBuilder.Entity("Catalog.API.Model.CatalogItemAttributeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogItemAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogItemCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatalogItemAttributeId");

                    b.HasIndex("CatalogItemCategoryId");

                    b.ToTable("CatalogItemAttributeCategories", (string)null);
                });

            modelBuilder.Entity("Catalog.API.Model.CatalogItemAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogItemAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogItemId")
                        .HasColumnType("int");

                    b.Property<bool?>("ValueBool")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ValueDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ValueFloat")
                        .HasColumnType("float");

                    b.Property<long?>("ValueNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("ValueText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogItemAttributeId");

                    b.HasIndex("CatalogItemId");

                    b.ToTable("CatalogItemAttributeValues", (string)null);
                });

            modelBuilder.Entity("Catalog.API.Model.CatalogItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CatalogItemCategories", (string)null);
                });

            modelBuilder.Entity("Catalog.API.Model.CatalogItem", b =>
                {
                    b.HasOne("Catalog.API.Model.CatalogItemCategory", "CatalogItemCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogItemCategory");
                });

            modelBuilder.Entity("Catalog.API.Model.CatalogItemAttributeCategory", b =>
                {
                    b.HasOne("Catalog.API.Model.CatalogItemAttribute", "CatalogItemAttribute")
                        .WithMany()
                        .HasForeignKey("CatalogItemAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.API.Model.CatalogItemCategory", "CatalogItemCategory")
                        .WithMany()
                        .HasForeignKey("CatalogItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogItemAttribute");

                    b.Navigation("CatalogItemCategory");
                });

            modelBuilder.Entity("Catalog.API.Model.CatalogItemAttributeValue", b =>
                {
                    b.HasOne("Catalog.API.Model.CatalogItemAttribute", "CatalogItemAttribute")
                        .WithMany()
                        .HasForeignKey("CatalogItemAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.API.Model.CatalogItem", "CatalogItem")
                        .WithMany()
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogItem");

                    b.Navigation("CatalogItemAttribute");
                });
#pragma warning restore 612, 618
        }
    }
}
